import streamlit as st
import pandas as pd
import plotly.express as px
from openai import OpenAI

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

st.set_page_config(page_title="Rapport √âvaluation Session", page_icon="üå∫", layout="wide")
st.image("logo_beautiful_soul.png", width=200)

st.markdown("""
    <h1 style='text-align: center; color: #E7383A;'>üå∫ Rapport Automatique de Session</h1>
    <h3 style='text-align: center; color: #F29325;'>√âvaluations participants Beautiful Soul</h3>
""", unsafe_allow_html=True)

uploaded_file = st.file_uploader("üìÅ Importer votre fichier CSV ou Excel", type=['csv', 'xlsx'])

if uploaded_file:
    data = pd.read_csv(uploaded_file) if uploaded_file.name.endswith('.csv') else pd.read_excel(uploaded_file)
    st.success("‚úÖ Donn√©es charg√©es !")
    st.dataframe(data, use_container_width=True)

    required_cols = {
        'Changements_collectifs', 'Changements_individuels', 
        'Satisfaction', 'Recommandation', 'Appreciation', 'Suggestions'
    }

    if required_cols.issubset(data.columns):
        if st.button("üß† G√©n√©rer Rapport IA"):
            with st.spinner("‚è≥ G√©n√©ration du rapport en cours..."):

                satisfaction_moyenne = data['Satisfaction'].mean()
                recommandation_moyenne = data['Recommandation'].mean()

                fig1 = px.histogram(data, x='Satisfaction', nbins=10, title='üìä Satisfaction globale (0-10)', color_discrete_sequence=['#E7383A'])
                fig2 = px.histogram(data, x='Recommandation', nbins=10, title='üìä Probabilit√© de recommandation (0-10)', color_discrete_sequence=['#F29325'])

                st.plotly_chart(fig1, use_container_width=True)
                st.plotly_chart(fig2, use_container_width=True)

                prompt = f"""
                Tu es un expert en r√©daction professionnelle en gestion du changement organisationnel et d√©veloppement du leadership.

                Voici les r√©sultats d'une √©valuation suite √† une session :

                Satisfaction moyenne : {satisfaction_moyenne:.2f}/10
                Probabilit√© moyenne de recommandation : {recommandation_moyenne:.2f}/10

                Changements observ√©s au niveau collectif :
                {data['Changements_collectifs'].dropna().tolist()}

                Changements observ√©s au niveau individuel :
                {data['Changements_individuels'].dropna().tolist()}

                Ce que les participants ont le plus appr√©ci√© :
                {data['Appreciation'].dropna().tolist()}

                Suggestions d'am√©lioration :
                {data['Suggestions'].dropna().tolist()}

                R√©dige un rapport professionnel structur√© ainsi :

                1. Introduction g√©n√©rale
                2. Synth√®se quantitative (satisfaction et recommandation)
                3. Analyse qualitative des changements observ√©s (collectifs et individuels)
                4. Principaux points appr√©ci√©s par les participants
                5. Axes pr√©cis d'am√©lioration propos√©s par les participants
                6. Conclusion et recommandations concr√®tes pour les prochaines sessions

                Style clair, professionnel et ax√© r√©sultats.
                """

                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "system", "content": prompt}]
                )

                rapport = response.choices[0].message.content
                st.markdown("<h2 style='color: #E7383A;'>üìù Rapport de Session</h2>", unsafe_allow_html=True)
                st.markdown(rapport)
                st.download_button("üì• T√©l√©charger Rapport", data=rapport, file_name="rapport_session.txt")

    else:
        st.error(f"‚ö†Ô∏è Votre fichier doit obligatoirement contenir les colonnes : {required_cols}")

st.markdown("""
<style>
    .stButton > button {background-color: #E7383A; color: white;}
    .stButton > button:hover {background-color: #F29325;}
</style>
""", unsafe_allow_html=True)
